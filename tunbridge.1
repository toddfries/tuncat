.\"     $Id$
.\"
.\" Copyright (c) 2005, Kenjiro Cho
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"    - Redistributions of source code must retain the above copyright
.\"      notice, this list of conditions and the following disclaimer.
.\"    - Redistributions in binary form must reproduce the above
.\"      copyright notice, this list of conditions and the following
.\"      disclaimer in the documentation and/or other materials provided
.\"      with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
.\" FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
.\" COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
.\" BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
.\" CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
.\" ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd May 26, 2005
.Dt TUNBRIDGE 1
.Os
.Sh NAME
.Nm tunbridge
.Nd emulate a long, possibly lossy, link using the tun device.
.Sh SYNOPSIS
.Nm
.Op Fl qv
.Op Fl b Ar bit_error
.Op Fl d Ar delay_ms
.Op Fl l Ar queue_limit
.Op Fl n Ar device
.Op Fl p Ar packetloss_probability
.Op Fl s Ar shaping_rate
.Sh DESCRIPTION
The
.Nm
utility emulates a long, possibly lossy, link using the tun device.
.Pp
.Nm
reads packets from the
.Xr tun 4
device, creates a delay, packet loss, and packet shaping, and then,
reinjects the packets to the same tun device.
.Pp
.Nm
reports statistics every 5 seconds, or when the SIGUSR1 signal is received.
.Pp
Note that, since the delay is controlled in the userland, the
precision is affected by process scheduling.
Also note that the precision of the delay and shaping control is
limited by the kernel clock tick granularity (10ms in popular
platforms).
.Pp
The options are as follows:
.Bl -tag -width indent
.It Fl b Ar bit_error
Specify the bit error rate for the emulated link in a floating point
number.
The specified value is read by
.Xr strtod 3 .
When the bit error is specified, the packet loss probability becomes
propotional to the packet size so that larger packets have a higher
probability to be lost than smaller packets.
The default value is 0.
.It Fl d Ar delay_ms
Specify the delay in milli-seconds.
The default value is 200 ms.
.It Fl l Ar queue_limit
Specify the queue size limit in packets.  The default value is 500.
.It Fl n Ar device
Specify the tun device name.
The default value is
.Pa /dev/tun0 .
.It Fl p Ar packetloss_probability
Specify the packet loss probability in a floating point number.
The specified value is read by
.Xr strtod 3 .
The default value is 0.
.It Fl s Ar shaping_rate
Specify the shaping rate in bits per seconds.  The rate is the
throughput of the network layer (e.g., IP) and does not include
MAC headers.  The shaping rate 0 means no shaping.  The default value
is 0.
The suffixes
.Ar b ,
.Ar Kb ,
.Ar Mb ,
and
.Ar Gb
are used to represent bits, kilobits, megabits, and
gigabits per second, respectively.
.It Fl q
Only print errors and warnings.
.It Fl v
Produce more verbose output.
.El
.Sh RETURN VALUES
.Nm
returns 0 on success,
and non-zero if the arguments are incorrect or at an error.
.Sh EXAMPLES
The following exmaples demonstrates how to use
.Nm .
.Pp
To emulate a link with 400 ms delay,
.Bd -literal -offset indent
tunbridge -d 400
.Ed
.Pp
To emulate a 128Kb link with 300 ms delay,
.Bd -literal -offset indent
tunbridge -s 128Kb -d 300
.Ed
.Pp
To emulate a 1.5Mb link with 100 ms delay and 1% packet loss using
.Pa /dev/tun1 ,
.Bd -literal -offset indent
tunbridge -s 1.5Mb -d 100 -p 0.01 -n /dev/tun1
.Ed
.Pp
The system must be configured to send packets to the tun device and
properly handle reinjected packets.  Care should be taken not to
create a loop for reinjected packets.
The following example shows a simple
.Xr pf.conf 5
to redirect packets destined to a specific host to the emulated link.
.Bd -literal -offset indent
tun_if = \&"tun0\&"
int_if = \&"em0\&"
pass in quick on $int_if route-to $tun_if from any to 192.0.2.1
.Ed
.Pp
In order to forward reinjected packets, packet forwarding needs to
be enabled, which usually needs the following line in
.Pa /etc/sysctl.conf .
.Bd -literal -offset indent
net.inet.ip.forwarding=1
.Ed
.Sh SEE ALSO
.Xr tun 4 ,
.Xr pf 4 ,
.Xr pf.conf 5
